from math import sqrt
from numpy import concatenate
%matplotlib inline
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from pathlib import Path

def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    df = DataFrame(data)
    cols, names = list(), list()
    # input sequence (t-n, ... t-1)
    for i in range(n_in, 0, -1):
        cols.append(df.shift(i))
        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
    # forecast sequence (t, t+1, ... t+n)
    for i in range(0, n_out):
        cols.append(df.shift(-i))
        if i == 0:
            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
        else:
            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
    # put it all together
    agg = concat(cols, axis=1)
    agg.columns = names
    # drop rows with NaN values
    if dropnan:
        agg.dropna(inplace=True)
    return agg
 
# load dataset
dataset = read_csv('date_time_config.csv', header=0, index_col=0)

#Select a specific Grade
values = dataset.values


# Encording Strings to Numberical values.
labelencoder_X = LabelEncoder()

# Encoding Broker Name
values[:, 1] = labelencoder_X.fit_transform(values[:, 1])
    
# Encoding Catalogue MF
values[:, 2] = labelencoder_X.fit_transform(values[:, 2])
    
# Encoding Catalogue Factory Name
values[:, 3] = labelencoder_X.fit_transform(values[:, 3])
    
# Encoding Tea Grade
values[:, 4] = labelencoder_X.fit_transform(values[:, 4])
    
# Encoding Factory Invoice Number
values[:, 5] = labelencoder_X.fit_transform(values[:, 5])
    
# Encoding Buyer ID
values[:, 7] = labelencoder_X.fit_transform(values[:, 7])
    
# Encoding Buyer Name
values[:, 8] = labelencoder_X.fit_transform(values[:, 8])
    
# Encoding Factory Name
values[:, 9] = labelencoder_X.fit_transform(values[:, 9])
    
# Encoding Catalogue MF
values[:, 10] = labelencoder_X.fit_transform(values[:, 10])

# ensure all data is float
values = values.astype('float32')

# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
reframed = series_to_supervised(scaled, 1, 1)
# drop columns we don't want to predict
reframed.drop(reframed.columns[[13,14,15,16,17,18,19,20,21,22,23,25]], axis=1, inplace=True)

# split into train and test sets
values = reframed.values
n_train_hours = int(round((values.shape[0] * 0.8)))
train = values[:n_train_hours, :]
test = values[n_train_hours:, :]
# split into input and outputs
train_X, train_y = train[:, :-1], train[:, -1]
test_X, test_y = test[:, :-1], test[:, -1]
# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)




regressor = Sequential()


regressor.add(LSTM(units = 60, return_sequences = True, input_shape=(train_X.shape[1], train_X.shape[2])))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 60, return_sequences = True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 60, return_sequences = True))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 60))
regressor.add(Dropout(0.2))

regressor.add(Dense(units = 1))

regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

history = regressor.fit(train_X, train_y, epochs=100, batch_size=500, validation_data=(test_X, test_y), verbose=2, shuffle=False)


# plot history
pyplot.plot(history.history['loss'], label='train')
pyplot.plot(history.history['val_loss'], label='test')
pyplot.legend()
pyplot.show()

 
# make a prediction
yhat = regressor.predict(test_X)
test_X = test_X.reshape((test_X.shape[0], test_X.shape[2]))
# invert scaling for forecast
inv_yhat = concatenate((yhat, test_X[:, 1:]), axis=1)
inv_yhat = scaler.inverse_transform(inv_yhat)
inv_yhat = inv_yhat[:,0]
# invert scaling for actual
test_y = test_y.reshape((len(test_y), 1))
inv_y = concatenate((test_y, test_X[:, 1:]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:,0]
# calculate RMSE
rmse = sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)

# serialize model to JSON
model_json = regressor.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
    
# serialize weights to HDF5
regressor.save_weights("model.h5")
print("Saved model to disk")
 
